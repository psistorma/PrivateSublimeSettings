!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEF_CACHE_SIZE	.\cc_resultcache.c	12;"	d	file:
DEF_POOL_SIZE	.\cc_trie.c	58;"	d	file:
EXPORT	.\py_bind.c	12;"	d	file:
EXPORT	.\py_bind.c	14;"	d	file:
MINGWSUPPORT	.\py_bind.c	17;"	d	file:
MINGWSUPPORT	.\py_bind.c	19;"	d	file:
_CC_RESULTCACHE_H_	.\cc_resultcache.h	2;"	d
_CC_RESULT_H_	.\cc_result.h	2;"	d
_CC_SYMBOL_H_	.\cc_symbol.h	2;"	d
_CC_TRIE_H_	.\cc_trie.h	2;"	d
_CHAR_COUNT	.\cc_trie.c	10;"	d	file:
_COMPLETE_OPTIONS	.\cc_result.c	17;"	d	file:
_PARSE_OPTIONS	.\cc_symbol.c	21;"	d	file:
_char2pos	.\cc_trie.c	/^static int _char2pos[] = {$/;"	v	file:
_dump_node	.\cc_trie.c	/^_dump_node(struct cc_trie* tp, struct cc_node* root, trie_visit func, void* ud) {$/;"	f	file:
_insert	.\cc_result.c	/^_insert(struct cc_result* rp, unsigned int entry_idx) {$/;"	f	file:
_tdump	.\cc_trie.c	/^_tdump(struct cc_trie* tp, struct cc_node* node, uint32_t pos) {$/;"	f	file:
_visit_func	.\cc_result.c	/^_visit_func(unsigned int v, void* ud) {$/;"	f	file:
c2idx	.\cc_trie.c	35;"	d	file:
cache	.\cc_symbol.c	/^  struct cc_resultcache* cache;$/;"	m	struct:cc_symbol	typeref:struct:cc_symbol::cc_resultcache	file:
cc_def	.\cc_symbol.h	/^struct  cc_def{$/;"	s
cc_node	.\cc_trie.c	/^struct cc_node {$/;"	s	file:
cc_result	.\cc_result.c	/^struct cc_result {$/;"	s	file:
cc_result_dump	.\cc_result.c	/^cc_result_dump(struct cc_result* rp,  struct match_result result) {$/;"	f
cc_result_entryname	.\cc_result.c	/^cc_result_entryname(CXCompletionString cs) {$/;"	f
cc_result_free	.\cc_result.c	/^cc_result_free(struct cc_result* rp) {$/;"	f
cc_result_match	.\cc_result.c	/^cc_result_match(struct cc_result* rp, const char* prefix) {$/;"	f
cc_result_new	.\cc_result.c	/^cc_result_new(CXTranslationUnit tu, struct cc_trie* tp, struct cc_resultcache* cache, const char* filename, unsigned int line, unsigned int col, struct CXUnsavedFile* unsaved_files, unsigned int num_unsaved_files) {$/;"	f
cc_resultcache	.\cc_resultcache.c	/^struct cc_resultcache {$/;"	s	file:
cc_resultcache_clear	.\cc_resultcache.c	/^cc_resultcache_clear(struct cc_resultcache* cache) {$/;"	f
cc_resultcache_free	.\cc_resultcache.c	/^cc_resultcache_free(struct cc_resultcache* cache) {$/;"	f
cc_resultcache_get	.\cc_resultcache.c	/^cc_resultcache_get(struct cc_resultcache* cache) {$/;"	f
cc_resultcache_head	.\cc_resultcache.c	/^cc_resultcache_head(struct cc_resultcache* cache) {$/;"	f
cc_resultcache_new	.\cc_resultcache.c	/^cc_resultcache_new() {$/;"	f
cc_resultcache_pos	.\cc_resultcache.c	/^cc_resultcache_pos(struct cc_resultcache* cache) {$/;"	f
cc_symbol	.\cc_symbol.c	/^struct cc_symbol {$/;"	s	file:
cc_symbol_complete_at	.\cc_symbol.c	/^cc_symbol_complete_at(struct cc_symbol* sp, unsigned int line, unsigned int col, struct CXUnsavedFile* unsaved_files, unsigned int num_unsaved_files) {$/;"	f
cc_symbol_def	.\cc_symbol.c	/^cc_symbol_def(struct cc_symbol* sp, const char* file_name, unsigned int line, unsigned int col, struct cc_def* out_def) {$/;"	f
cc_symbol_diagnostic	.\cc_symbol.c	/^cc_symbol_diagnostic(struct cc_symbol* sp, diagnostic_visit func, void* ud) {$/;"	f
cc_symbol_free	.\cc_symbol.c	/^cc_symbol_free(struct cc_symbol* sp) {$/;"	f
cc_symbol_new	.\cc_symbol.c	/^cc_symbol_new(const char* filename, const char* opt[], int opt_len, struct CXUnsavedFile*  unsaved_files, unsigned num_unsaved_files) {$/;"	f
cc_symbol_reparse	.\cc_symbol.c	/^cc_symbol_reparse(struct cc_symbol* sp, struct CXUnsavedFile*  unsaved_files, unsigned num_unsaved_files) {$/;"	f
cc_symbol_tu	.\cc_symbol.c	/^cc_symbol_tu(struct cc_symbol* sp) {$/;"	f
cc_trie	.\cc_trie.c	/^struct cc_trie {$/;"	s	file:
cc_trie_clear	.\cc_trie.c	/^cc_trie_clear(struct cc_trie* tp) {$/;"	f
cc_trie_free	.\cc_trie.c	/^cc_trie_free(struct cc_trie* tp) {$/;"	f
cc_trie_insert	.\cc_trie.c	/^cc_trie_insert(struct cc_trie* tp, const char* str, unsigned int ud) {$/;"	f
cc_trie_match	.\cc_trie.c	/^cc_trie_match(struct cc_trie* tp, const char* prefix, trie_visit func, void* ud) {$/;"	f
cc_trie_new	.\cc_trie.c	/^cc_trie_new() {$/;"	f
cc_trie_size	.\cc_trie.c	/^cc_trie_size(struct cc_trie* tp) {$/;"	f
cc_trunk	.\py_bind.c	/^struct cc_trunk {$/;"	s	file:
childs	.\cc_trie.c	/^  uint32_t childs[_CHAR_COUNT];$/;"	m	struct:cc_node	file:
col	.\cc_symbol.h	/^  unsigned int col;$/;"	m	struct:cc_def
count	.\cc_trie.c	/^  uint8_t count;$/;"	m	struct:cc_node	file:
diagnostic_visit	.\cc_symbol.h	/^typedef void(*diagnostic_visit)(const char* info, void* ud);$/;"	t
filename	.\cc_symbol.c	/^  char* filename;$/;"	m	struct:cc_symbol	file:
filename	.\cc_symbol.h	/^  const char* filename;$/;"	m	struct:cc_def
has_ud	.\cc_trie.c	/^  bool has_ud;$/;"	m	struct:cc_node	file:
idx2char	.\cc_trie.c	/^static int idx2char[] = {$/;"	v	file:
kind	.\py_bind.c	/^  enum CXCompletionChunkKind kind;$/;"	m	struct:cc_trunk	typeref:enum:cc_trunk::CXCompletionChunkKind	file:
line	.\cc_symbol.h	/^  unsigned int line;$/;"	m	struct:cc_def
list	.\cc_trie.c	/^  uint8_t list[_CHAR_COUNT];$/;"	m	struct:cc_node	file:
match_result	.\cc_result.h	/^struct match_result {$/;"	s
node_insert	.\cc_trie.c	/^node_insert(struct cc_trie* tp, uint32_t node_pos, char c) {$/;"	f	file:
node_next	.\cc_trie.c	/^node_next(struct cc_trie* tp, struct cc_node* node, char c) {$/;"	f	file:
p	.\cc_resultcache.c	/^  CXCompletionResult** p;$/;"	m	struct:cc_resultcache	file:
p	.\cc_trie.c	/^    struct cc_node* p;$/;"	m	struct:cc_trie::__anon1	typeref:struct:cc_trie::__anon1::cc_node	file:
pool	.\cc_trie.c	/^  }pool;$/;"	m	struct:cc_trie	typeref:struct:cc_trie::__anon1	file:
pool_get	.\cc_trie.c	/^pool_get(struct cc_trie* tp) {$/;"	f	file:
pos	.\cc_resultcache.c	/^  size_t pos;$/;"	m	struct:cc_resultcache	file:
pos	.\cc_trie.c	/^    uint32_t pos;$/;"	m	struct:cc_trie::__anon1	file:
pos2node	.\cc_trie.c	36;"	d	file:
py_cs_count	.\py_bind.c	/^py_cs_count(CXCompletionString cs) {$/;"	f
py_cs_entryname	.\py_bind.c	/^py_cs_entryname(CXCompletionString cs) {$/;"	f
py_cs_trunk	.\py_bind.c	/^py_cs_trunk(CXCompletionString cs, unsigned int idx) {$/;"	f
py_diagnostic	.\py_bind.c	/^py_diagnostic(CXDiagnosticSet set, unsigned int idx) {$/;"	f
py_diagnostic_free	.\py_bind.c	/^py_diagnostic_free(CXDiagnosticSet set) {$/;"	f
py_diagnostic_new	.\py_bind.c	/^py_diagnostic_new(struct cc_symbol* sp) {$/;"	f
py_diagnostic_num	.\py_bind.c	/^py_diagnostic_num(CXDiagnosticSet set) {$/;"	f
py_result_free	.\py_bind.c	/^py_result_free(struct cc_result* rp) {$/;"	f
py_result_match	.\py_bind.c	/^py_result_match(struct cc_result* rp, const char* prefix) {$/;"	f
py_symbol_complete_at	.\py_bind.c	/^py_symbol_complete_at(struct cc_symbol* sp, unsigned int line, unsigned int col, struct CXUnsavedFile* unsaved_files, unsigned int num_unsaved_files) {$/;"	f
py_symbol_def	.\py_bind.c	/^py_symbol_def(struct cc_symbol* sp, const char* filename, unsigned line, unsigned col) {$/;"	f
py_symbol_free	.\py_bind.c	/^py_symbol_free(struct cc_symbol* sp) {$/;"	f
py_symbol_new	.\py_bind.c	/^py_symbol_new(const char* filename, const char* opt[], unsigned int opt_len, struct CXUnsavedFile*  unsaved_files, unsigned num_unsaved_files) {$/;"	f
py_symbol_reparse	.\py_bind.c	/^py_symbol_reparse(struct cc_symbol* sp, struct CXUnsavedFile*  unsaved_files, unsigned num_unsaved_files) {$/;"	f
ref_cache	.\cc_result.c	/^  struct cc_resultcache* ref_cache;   \/\/ the struct ccresultcache reference, not need free$/;"	m	struct:cc_result	typeref:struct:cc_result::cc_resultcache	file:
ref_tp	.\cc_result.c	/^  struct cc_trie* ref_tp;             \/\/ the struct cc_trie reference, not need free$/;"	m	struct:cc_result	typeref:struct:cc_result::cc_trie	file:
result	.\cc_result.c	/^  CXCodeCompleteResults* result;$/;"	m	struct:cc_result	file:
root	.\cc_trie.c	/^  uint32_t root;$/;"	m	struct:cc_trie	file:
size	.\cc_result.h	/^  unsigned int size;$/;"	m	struct:match_result
size	.\cc_resultcache.c	/^  size_t size;$/;"	m	struct:cc_resultcache	file:
size	.\cc_trie.c	/^    uint32_t size;$/;"	m	struct:cc_trie::__anon1	file:
snprintf	.\py_bind.c	10;"	d	file:
table	.\cc_result.h	/^  CXCompletionResult** table;$/;"	m	struct:match_result
tp	.\cc_symbol.c	/^  struct cc_trie* tp;$/;"	m	struct:cc_symbol	typeref:struct:cc_symbol::cc_trie	file:
trie_dump	.\cc_trie.c	/^trie_dump(struct cc_trie* tp) {$/;"	f
trie_visit	.\cc_trie.h	/^typedef void (*trie_visit)(unsigned int v, void* ud);$/;"	t
tu	.\cc_symbol.c	/^  CXTranslationUnit tu;$/;"	m	struct:cc_symbol	file:
ud	.\cc_trie.c	/^  unsigned int ud;$/;"	m	struct:cc_node	file:
value	.\py_bind.c	/^  const char* value;$/;"	m	struct:cc_trunk	file:
