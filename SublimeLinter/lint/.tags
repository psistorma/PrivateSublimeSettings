!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ANSI_COLOR_RE	.\util.py	/^ANSI_COLOR_RE = re.compile(r'\\033\\[[0-9;]*m')$/;"	v
ARG_RE	.\linter.py	/^ARG_RE = re.compile(r'(?P<prefix>@|--?)?(?P<name>[@\\w][\\w\\-]*)(?:(?P<joiner>[=:])(?:(?P<sep>.)(?P<multiple>\\+)?)?)?')$/;"	v
BASE_CLASSES	.\linter.py	/^BASE_CLASSES = ('PythonLinter',)$/;"	v
CHOOSERS	.\util.py	/^CHOOSERS = ($/;"	v
CMD_RE	.\ruby_linter.py	/^CMD_RE = re.compile(r'(?P<gem>.+?)@ruby')$/;"	v
COLOR_SCHEME_STYLES	.\util.py	/^COLOR_SCHEME_STYLES = {$/;"	v
DEFAULT_GUTTER_THEME_PATH	.\persist.py	/^DEFAULT_GUTTER_THEME_PATH = 'Packages\/SublimeLinter\/gutter-themes\/Default\/Default.gutter-theme'$/;"	v
DEFAULT_MARK_COLORS	.\util.py	/^DEFAULT_MARK_COLORS = {'warning': 'EDBA00', 'error': 'DA2000', 'gutter': 'FFFFFF'}$/;"	v
Daemon	.\queue.py	/^class Daemon:$/;"	c
ERROR	.\highlight.py	/^ERROR = 'error'$/;"	v
ElementTree	.\util.py	/^from xml.etree import ElementTree$/;"	i
Empty	.\queue.py	/^from queue import Queue, Empty$/;"	i
GUTTER_MARK_KEY_FORMAT	.\highlight.py	/^GUTTER_MARK_KEY_FORMAT = 'sublimelinter-{}-gutter-marks'$/;"	v
HTML_ENTITY_RE	.\linter.py	/^HTML_ENTITY_RE = re.compile(r'&(?:(?:#(x)?([0-9a-fA-F]{1,4}))|(\\w+));')$/;"	v
Highlight	.\highlight.py	/^class Highlight:$/;"	c
HighlightSet	.\highlight.py	/^class HighlightSet:$/;"	c
INLINE_SETTINGS_RE	.\util.py	/^INLINE_SETTINGS_RE = re.compile(r'(?i).*?\\[sublimelinter[ ]+(?P<settings>[^\\]]+)\\]')$/;"	v
INLINE_SETTING_RE	.\util.py	/^INLINE_SETTING_RE = re.compile(r'(?P<key>[@\\w][\\w\\-]*)\\s*:\\s*(?P<value>[^\\s]+)')$/;"	v
LINT_MODES	.\persist.py	/^LINT_MODES = ($/;"	v
Linter	.\__init__.py	/^from .linter import Linter$/;"	i
Linter	.\linter.py	/^class Linter(metaclass=LinterMeta):$/;"	c
Linter	.\persist.py	/^        from .linter import Linter$/;"	i
LinterMeta	.\linter.py	/^class LinterMeta(type):$/;"	c
MARK_COLOR_RE	.\util.py	/^MARK_COLOR_RE = ($/;"	v
MARK_KEY_FORMAT	.\highlight.py	/^MARK_KEY_FORMAT = 'sublimelinter-{}-marks'$/;"	v
MARK_SCOPE_FORMAT	.\highlight.py	/^MARK_SCOPE_FORMAT = 'sublimelinter.mark.{}'$/;"	v
MARK_STYLES	.\highlight.py	/^MARK_STYLES = {$/;"	v
MENU_INDENT_RE	.\util.py	/^MENU_INDENT_RE = re.compile(r'^(\\s+)\\$menus', re.MULTILINE)$/;"	v
MIN_DELAY	.\queue.py	/^    MIN_DELAY = 0.1$/;"	v	class:Daemon
NEAR_RE_TEMPLATE	.\highlight.py	/^NEAR_RE_TEMPLATE = r'(?<!"){}({}){}(?!")'$/;"	v
NodeLinter	.\__init__.py	/^from .node_linter import NodeLinter$/;"	i
NodeLinter	.\node_linter.py	/^class NodeLinter(linter.Linter):$/;"	c
Number	.\linter.py	/^from numbers import Number$/;"	i
Number	.\util.py	/^from numbers import Number$/;"	i
PLUGIN_DIRECTORY	.\persist.py	/^PLUGIN_DIRECTORY = os.path.basename(os.path.dirname(os.path.dirname(__file__)))$/;"	v
PLUGIN_NAME	.\persist.py	/^PLUGIN_NAME = 'SublimeLinter'$/;"	v
PYTHON_CMD_RE	.\util.py	/^PYTHON_CMD_RE = re.compile(r'(?P<script>[^@]+)?@python(?P<version>[\\d\\.]+)?')$/;"	v
PythonLinter	.\__init__.py	/^from .python_linter import PythonLinter$/;"	i
PythonLinter	.\python_linter.py	/^class PythonLinter(linter.Linter):$/;"	c
Queue	.\queue.py	/^from queue import Queue, Empty$/;"	i
RubyLinter	.\__init__.py	/^from .ruby_linter import RubyLinter$/;"	i
RubyLinter	.\ruby_linter.py	/^class RubyLinter(linter.Linter):$/;"	c
SHEBANG_RE	.\python_linter.py	/^    SHEBANG_RE = re.compile(r'\\s*#!(?:(?:\/[^\/]+)*[\/ ])?python(?P<version>\\d(?:\\.\\d)?)')$/;"	v	class:PythonLinter
STREAM_BOTH	.\util.py	/^STREAM_BOTH = STREAM_STDOUT + STREAM_STDERR$/;"	v
STREAM_STDERR	.\util.py	/^STREAM_STDERR = 2$/;"	v
STREAM_STDOUT	.\util.py	/^STREAM_STDOUT = 1$/;"	v
SYNTAX_RE	.\persist.py	/^SYNTAX_RE = re.compile(r'(?i)\/([^\/]+)\\.(?:tmLanguage|sublime-syntax)$')$/;"	v
Settings	.\persist.py	/^class Settings:$/;"	c
TOGGLE_ITEMS	.\util.py	/^TOGGLE_ITEMS = {$/;"	v
Template	.\util.py	/^from string import Template$/;"	i
UNDERLINE_FLAGS	.\highlight.py	/^UNDERLINE_FLAGS = sublime.DRAW_NO_FILL | sublime.DRAW_NO_OUTLINE | sublime.DRAW_EMPTY_AS_OVERWRITE$/;"	v
UNSAVED_FILENAME	.\util.py	/^UNSAVED_FILENAME = 'untitled'$/;"	v
VERSION_RE	.\util.py	/^VERSION_RE = re.compile(r'(?P<major>\\d+)(?:\\.(?P<minor>\\d+))?')$/;"	v
VersionPredicate	.\linter.py	/^from distutils.versionpredicate import VersionPredicate$/;"	i
WARNING	.\highlight.py	/^WARNING = 'warning'$/;"	v
WORD_RE	.\highlight.py	/^WORD_RE = re.compile(r'^([-\\w]+)')$/;"	v
X_OK	.\node_linter.py	/^from os import path, access, X_OK$/;"	i
__enter__	.\util.py	/^    def __enter__(self):$/;"	m	class:cd	file:
__exit__	.\util.py	/^    def __exit__(self, etype, value, traceback):$/;"	m	class:cd	file:
__init__	.\highlight.py	/^    def __init__(self):$/;"	m	class:HighlightSet
__init__	.\highlight.py	/^    def __init__(self, code=''):$/;"	m	class:Highlight
__init__	.\linter.py	/^    def __init__(cls, name, bases, attrs):$/;"	m	class:LinterMeta
__init__	.\linter.py	/^    def __init__(self, view, syntax):$/;"	m	class:Linter
__init__	.\node_linter.py	/^    def __init__(self, view, syntax):$/;"	m	class:NodeLinter
__init__	.\persist.py	/^    def __init__(self):$/;"	m	class:Settings
__init__	.\util.py	/^    def __init__(self, newPath):$/;"	m	class:cd
access	.\node_linter.py	/^from os import path, access, X_OK$/;"	i
add	.\highlight.py	/^    def add(self, highlight):$/;"	m	class:HighlightSet
apply	.\linter.py	/^        def apply(view):$/;"	f	function:Linter.apply_to_all_highlights
apply_to_all_highlights	.\linter.py	/^    def apply_to_all_highlights(cls, action):$/;"	m	class:Linter
apply_to_all_views	.\util.py	/^def apply_to_all_views(callback):$/;"	f
assign	.\linter.py	/^    def assign(cls, view, linter_name=None, reset=False):$/;"	m	class:Linter
build_args	.\linter.py	/^    def build_args(self, settings):$/;"	m	class:Linter
build_cmd	.\linter.py	/^    def build_cmd(self, cmd=None):$/;"	m	class:Linter
build_options	.\linter.py	/^    def build_options(self, options, type_map, transform=None):$/;"	m	class:Linter
build_submenu	.\util.py	/^def build_submenu(caption):$/;"	f
callback	.\queue.py	/^    callback = None$/;"	v	class:Daemon
can_exec	.\util.py	/^def can_exec(path):$/;"	f
can_lint	.\linter.py	/^    def can_lint(cls, syntax):$/;"	m	class:Linter
can_lint	.\node_linter.py	/^    def can_lint(cls, syntax):$/;"	m	class:NodeLinter
can_lint_syntax	.\linter.py	/^    def can_lint_syntax(cls, syntax):$/;"	m	class:Linter
cd	.\util.py	/^class cd:$/;"	c
center_region_in_view	.\util.py	/^def center_region_in_view(region, view):$/;"	f
change_mark_colors	.\util.py	/^def change_mark_colors(error_color, warning_color):$/;"	f
check	.\python_linter.py	/^    def check(self, code, filename):$/;"	m	class:PythonLinter
check_version	.\python_linter.py	/^    check_version = False$/;"	v	class:PythonLinter
clear	.\highlight.py	/^    def clear(view):$/;"	m	class:Highlight
clear	.\highlight.py	/^    def clear(view):$/;"	m	class:HighlightSet
clear	.\linter.py	/^    def clear(self):$/;"	m	class:Linter
clear_all	.\linter.py	/^    def clear_all(cls):$/;"	m	class:Linter
clear_path_caches	.\util.py	/^def clear_path_caches():$/;"	f
clear_settings_caches	.\linter.py	/^    def clear_settings_caches(cls):$/;"	m	class:Linter
clear_view	.\linter.py	/^    def clear_view(view):$/;"	m	class:Linter
climb	.\util.py	/^def climb(start_dir, limit=None):$/;"	f
cmd	.\linter.py	/^    cmd = ''$/;"	v	class:Linter
codecs	.\node_linter.py	/^import codecs$/;"	i
combine_output	.\util.py	/^def combine_output(out, sep=''):$/;"	f
comment_re	.\linter.py	/^    comment_re = None$/;"	v	class:Linter
comment_re	.\node_linter.py	/^    comment_re = r'\\s*\/[\/*]'$/;"	v	class:NodeLinter
comment_re	.\python_linter.py	/^    comment_re = r'\\s*#'$/;"	v	class:PythonLinter
comment_re	.\ruby_linter.py	/^    comment_re = r'\\s*#'$/;"	v	class:RubyLinter
communicate	.\linter.py	/^    def communicate(self, cmd, code=None):$/;"	m	class:Linter
communicate	.\util.py	/^def communicate(cmd, code=None, output_stream=STREAM_STDOUT, env=None):$/;"	f
compile_demote_to_warning_match	.\linter.py	/^    def compile_demote_to_warning_match(self, pattern):$/;"	m	class:Linter
compile_ignore_match	.\linter.py	/^    def compile_ignore_match(self, pattern):$/;"	m	class:Linter
compiled_demote_to_warning_matches	.\linter.py	/^    def compiled_demote_to_warning_matches(self, demote_to_warning_match):$/;"	m	class:Linter
compiled_ignore_matches	.\linter.py	/^    def compiled_ignore_matches(self, ignore_match):$/;"	m	class:Linter
config_file	.\linter.py	/^    config_file = None$/;"	v	class:Linter
context_sensitive_executable_path	.\linter.py	/^    def context_sensitive_executable_path(self, cmd):$/;"	m	class:Linter
context_sensitive_executable_path	.\node_linter.py	/^    def context_sensitive_executable_path(self, cmd):$/;"	m	class:NodeLinter
context_sensitive_executable_path	.\python_linter.py	/^    def context_sensitive_executable_path(self, cmd):$/;"	m	class:PythonLinter
convert_type	.\util.py	/^def convert_type(value, type_value, sep=None, default=None):$/;"	f
copy	.\persist.py	/^    def copy(self):$/;"	m	class:Settings
create_environment	.\util.py	/^def create_environment():$/;"	f
create_tempdir	.\util.py	/^def create_tempdir():$/;"	f
debug	.\persist.py	/^def debug(*args):$/;"	f
debug_mode	.\persist.py	/^def debug_mode():$/;"	f
decode	.\util.py	/^def decode(bytes):$/;"	f
deepcopy	.\persist.py	/^from copy import deepcopy$/;"	i
default_type	.\linter.py	/^    default_type = highlight.ERROR$/;"	v	class:Linter
defaultdict	.\persist.py	/^from collections import defaultdict$/;"	i
defaults	.\linter.py	/^    defaults = None$/;"	v	class:Linter
delay	.\queue.py	/^    def delay(self, milliseconds=100):$/;"	m	class:Daemon
disabled	.\linter.py	/^    disabled = False$/;"	v	class:Linter
draw	.\highlight.py	/^    def draw(self, view):$/;"	m	class:Highlight
draw	.\highlight.py	/^    def draw(self, view):$/;"	m	class:HighlightSet
draw	.\linter.py	/^    def draw(self):$/;"	m	class:Linter
edit	.\persist.py	/^def edit(vid, edit):$/;"	f
edits	.\persist.py	/^    edits = defaultdict(list)$/;"	v	class:Settings
entities	.\linter.py	/^import html.entities$/;"	i
env	.\linter.py	/^    env = None$/;"	v	class:Linter
error	.\linter.py	/^    def error(self, line, col, message, error_type):$/;"	m	class:Linter
error_stream	.\linter.py	/^    error_stream = util.STREAM_BOTH$/;"	v	class:Linter
errors	.\linter.py	/^    errors = None$/;"	v	class:Linter
errors	.\persist.py	/^    errors = {}$/;"	v	class:Settings
executable	.\linter.py	/^    executable = None$/;"	v	class:Linter
executable_path	.\linter.py	/^    executable_path = None$/;"	v	class:Linter
executable_version	.\linter.py	/^    executable_version = None$/;"	v	class:Linter
extract_major_minor_version	.\util.py	/^def extract_major_minor_version(version):$/;"	f
extract_path	.\util.py	/^def extract_path(cmd, delim=':'):$/;"	f
filename	.\linter.py	/^    def filename(self):$/;"	m	class:Linter
find_errors	.\linter.py	/^    def find_errors(self, output):$/;"	m	class:Linter
find_executable	.\util.py	/^def find_executable(executable):$/;"	f
find_file	.\util.py	/^def find_file(start_dir, name, parent=False, limit=None, aux_dirs=[]):$/;"	f
find_local_cmd_path	.\node_linter.py	/^    def find_local_cmd_path(self, cmd):$/;"	m	class:NodeLinter
find_posix_python	.\util.py	/^def find_posix_python(version):$/;"	f
find_python	.\util.py	/^def find_python(version=None, script=None, module=None):$/;"	f
find_python_script	.\util.py	/^def find_python_script(python_path, script):$/;"	f
find_windows_python	.\util.py	/^def find_windows_python(version):$/;"	f
fnmatch	.\linter.py	/^from fnmatch import fnmatch$/;"	i
fulfills_version_requirement	.\linter.py	/^    def fulfills_version_requirement(cls):$/;"	m	class:Linter
full_line	.\highlight.py	/^    def full_line(self, line):$/;"	m	class:Highlight
generate_color_scheme	.\util.py	/^def generate_color_scheme(from_reload=True):$/;"	f
generate_color_scheme_async	.\util.py	/^def generate_color_scheme_async():$/;"	f
generate_menu	.\util.py	/^def generate_menu(name, menu_text):$/;"	f
generate_menus	.\util.py	/^def generate_menus(**kwargs):$/;"	f
generate_menus_async	.\util.py	/^def generate_menus_async():$/;"	f
get	.\persist.py	/^    def get(self, setting, default=None):$/;"	m	class:Settings
get_cmd	.\linter.py	/^    def get_cmd(self):$/;"	m	class:Linter
get_delay	.\queue.py	/^    def get_delay(self, view):$/;"	m	class:Daemon
get_environment_variable	.\util.py	/^def get_environment_variable(name):$/;"	f
get_executable_version	.\linter.py	/^    def get_executable_version(cls):$/;"	m	class:Linter
get_inline_settings	.\linter.py	/^    def get_inline_settings(self):$/;"	m	class:Linter
get_linters	.\linter.py	/^    def get_linters(cls, vid):$/;"	m	class:Linter
get_manifest	.\node_linter.py	/^    def get_manifest(self):$/;"	m	class:NodeLinter
get_manifest_path	.\node_linter.py	/^    def get_manifest_path(self):$/;"	m	class:NodeLinter
get_merged_settings	.\linter.py	/^    def get_merged_settings(self):$/;"	m	class:Linter
get_module_version	.\python_linter.py	/^    def get_module_version(cls):$/;"	m	class:PythonLinter
get_path_components	.\util.py	/^def get_path_components(path):$/;"	f
get_pkg_bin_cmd	.\node_linter.py	/^    def get_pkg_bin_cmd(self, cmd):$/;"	m	class:NodeLinter
get_python_paths	.\util.py	/^def get_python_paths():$/;"	f
get_python_version	.\util.py	/^def get_python_version(path):$/;"	f
get_rc_settings	.\util.py	/^def get_rc_settings(start_dir, limit=None):$/;"	f
get_selectors	.\linter.py	/^    def get_selectors(cls, vid, syntax):$/;"	m	class:Linter
get_shell_path	.\util.py	/^def get_shell_path(env):$/;"	f
get_subl_executable_path	.\util.py	/^def get_subl_executable_path():$/;"	f
get_syntax	.\persist.py	/^def get_syntax(view):$/;"	f
get_tempfile_suffix	.\linter.py	/^    def get_tempfile_suffix(self):$/;"	m	class:Linter
get_user_args	.\linter.py	/^    def get_user_args(self, settings=None):$/;"	m	class:Linter
get_user_fullname	.\util.py	/^def get_user_fullname():$/;"	f
get_view	.\linter.py	/^    def get_view(cls, vid):$/;"	m	class:Linter
get_view_rc_settings	.\util.py	/^def get_view_rc_settings(view, limit=None):$/;"	f
get_view_settings	.\linter.py	/^    def get_view_settings(self, inline=True):$/;"	m	class:Linter
getpass	.\util.py	/^import getpass$/;"	i
glob	.\util.py	/^from glob import glob$/;"	i
gutter_marks	.\persist.py	/^    gutter_marks = {'warning': 'Default', 'error': 'Default', 'colorize': True}$/;"	v	class:Settings
has_setting	.\persist.py	/^    def has_setting(self, setting):$/;"	m	class:Settings
hash_manifest	.\node_linter.py	/^    def hash_manifest(self):$/;"	m	class:NodeLinter
hashlib	.\node_linter.py	/^import hashlib$/;"	i
highlight	.\linter.py	/^    highlight = None$/;"	v	class:Linter
highlight	.\linter.py	/^from . import highlight, persist, util$/;"	i
highlight	.\util.py	/^        from . import highlight$/;"	i
highlights	.\persist.py	/^    highlights = {}$/;"	v	class:Settings
hit	.\queue.py	/^    def hit(self, view):$/;"	m	class:Daemon
html	.\linter.py	/^import html.entities$/;"	i
import_module	.\python_linter.py	/^    def import_module(cls):$/;"	m	class:PythonLinter
import_sys_path	.\persist.py	/^def import_sys_path():$/;"	f
importlib	.\python_linter.py	/^import importlib$/;"	i
indent_lines	.\util.py	/^def indent_lines(text, indent):$/;"	f
initialize	.\linter.py	/^    def initialize(cls):$/;"	m	class:Linter
initialize	.\python_linter.py	/^    def initialize(cls):$/;"	m	class:PythonLinter
initialize	.\ruby_linter.py	/^    def initialize(cls):$/;"	m	class:RubyLinter
inline_overrides	.\linter.py	/^    inline_overrides = None$/;"	v	class:Linter
inline_settings	.\linter.py	/^    inline_settings = None$/;"	v	class:Linter
inline_settings	.\util.py	/^def inline_settings(comment_re, code, prefix=None, alt_prefix=None):$/;"	f
insert_args	.\linter.py	/^    def insert_args(self, cmd):$/;"	m	class:Linter
is_dependency	.\node_linter.py	/^    def is_dependency(self):$/;"	m	class:NodeLinter
json	.\node_linter.py	/^import json$/;"	i
json	.\persist.py	/^import json$/;"	i
json	.\util.py	/^import json$/;"	i
last_hit_times	.\persist.py	/^    last_hit_times = {}$/;"	v	class:Settings
last_runs	.\queue.py	/^    last_runs = {}$/;"	v	class:Daemon
line	.\highlight.py	/^    def line(self, line, error_type):$/;"	m	class:Highlight
line_col_base	.\linter.py	/^    line_col_base = (1, 1)$/;"	v	class:Linter
line_type	.\highlight.py	/^    def line_type(self, line):$/;"	m	class:HighlightSet
lint	.\linter.py	/^    def lint(self, hit_time):$/;"	m	class:Linter
lint	.\node_linter.py	/^    def lint(self, hit_time):$/;"	m	class:NodeLinter
lint	.\queue.py	/^    def lint(self, view_id, timestamp):$/;"	m	class:Daemon
lint_settings	.\linter.py	/^    lint_settings = None$/;"	v	class:Linter
lint_view	.\linter.py	/^    def lint_view(cls, view, filename, code, hit_time, callback):$/;"	m	class:Linter
linter	.\node_linter.py	/^from . import linter, persist, util$/;"	i
linter	.\persist.py	/^            from . import linter$/;"	i
linter	.\python_linter.py	/^from . import linter, persist, util$/;"	i
linter	.\ruby_linter.py	/^from . import linter, persist, util$/;"	i
linter_classes	.\persist.py	/^    linter_classes = {}$/;"	v	class:Settings
load	.\persist.py	/^    def load(self, force=False):$/;"	m	class:Settings
locale	.\util.py	/^import locale$/;"	i
lookup_executables	.\ruby_linter.py	/^    def lookup_executables(cls, cmd):$/;"	m	class:RubyLinter
loop	.\queue.py	/^    def loop(self):$/;"	m	class:Daemon
lru_cache	.\linter.py	/^from functools import lru_cache$/;"	i
lru_cache	.\node_linter.py	/^from functools import lru_cache$/;"	i
lru_cache	.\util.py	/^from functools import lru_cache$/;"	i
make_alt_name	.\linter.py	/^    def make_alt_name(name):$/;"	m	class:LinterMeta
map_args	.\linter.py	/^    def map_args(cls, defaults):$/;"	m	class:LinterMeta
mark_style_names	.\highlight.py	/^def mark_style_names():$/;"	f
match_shebang	.\python_linter.py	/^    def match_shebang(code):$/;"	m	class:PythonLinter
merge_inline_settings	.\linter.py	/^    def merge_inline_settings(self, view_settings, inline_settings):$/;"	m	class:Linter
merge_project_settings	.\linter.py	/^    def merge_project_settings(self, view_settings, project_settings):$/;"	m	class:Linter
merge_rc_settings	.\linter.py	/^    def merge_rc_settings(self, settings):$/;"	m	class:Linter
merge_user_settings	.\util.py	/^def merge_user_settings(settings):$/;"	f
meta_settings	.\linter.py	/^    def meta_settings(settings):$/;"	m	class:Linter
module	.\python_linter.py	/^    module = None$/;"	v	class:PythonLinter
move_to	.\highlight.py	/^    def move_to(self, line, char_offset):$/;"	m	class:Highlight
multiline	.\linter.py	/^    multiline = False$/;"	v	class:Linter
name	.\linter.py	/^    def name(cls):$/;"	m	class:LinterMeta
name	.\linter.py	/^    def name(self):$/;"	m	class:Linter
near	.\highlight.py	/^    def near(self, line, near, error_type=ERROR, word_re=None):$/;"	m	class:Highlight
npm_name	.\node_linter.py	/^    npm_name = None$/;"	v	class:NodeLinter
observe	.\persist.py	/^    def observe(self, observer=None):$/;"	m	class:Settings
observe_prefs	.\persist.py	/^    def observe_prefs(self, observer=None):$/;"	m	class:Settings
on_prefs_update	.\persist.py	/^    def on_prefs_update(self):$/;"	m	class:Settings
on_update	.\persist.py	/^    def on_update(self):$/;"	m	class:Settings
on_update_call	.\persist.py	/^    def on_update_call(self, callback):$/;"	m	class:Settings
open_directory	.\util.py	/^def open_directory(path):$/;"	f
os	.\linter.py	/^import os$/;"	i
os	.\persist.py	/^import os$/;"	i
os	.\python_linter.py	/^import os$/;"	i
os	.\ruby_linter.py	/^import os$/;"	i
os	.\util.py	/^import os$/;"	i
override_options	.\linter.py	/^    def override_options(self, options, overrides, sep=','):$/;"	m	class:Linter
packages_relative_path	.\util.py	/^def packages_relative_path(path, prefix_packages=True):$/;"	f
path	.\node_linter.py	/^from os import path, access, X_OK$/;"	i
persist	.\highlight.py	/^from . import persist$/;"	i
persist	.\linter.py	/^from . import highlight, persist, util$/;"	i
persist	.\node_linter.py	/^from . import linter, persist, util$/;"	i
persist	.\python_linter.py	/^from . import linter, persist, util$/;"	i
persist	.\queue.py	/^from . import persist, util$/;"	i
persist	.\ruby_linter.py	/^from . import linter, persist, util$/;"	i
persist	.\util.py	/^            from . import persist$/;"	i
persist	.\util.py	/^        from . import persist$/;"	i
persist	.\util.py	/^    from . import persist$/;"	i
plugin_is_loaded	.\persist.py	/^    plugin_is_loaded = False$/;"	v	class:Settings
pop	.\persist.py	/^    def pop(self, setting, default=None):$/;"	m	class:Settings
popen	.\util.py	/^def popen(cmd, stdout=None, stderr=None, output_stream=STREAM_BOTH, env=None, extra_env=None):$/;"	f
prefs_reloaded	.\util.py	/^        def prefs_reloaded():$/;"	f	function:generate_color_scheme
printf	.\persist.py	/^def printf(*args):$/;"	f
pwd	.\util.py	/^        import pwd$/;"	i
pwd	.\util.py	/^    import pwd$/;"	i
q	.\queue.py	/^    q = Queue()$/;"	v	class:Daemon
queue	.\queue.py	/^queue = Daemon()$/;"	v
range	.\highlight.py	/^    def range(self, line, pos, length=-1, near=None, error_type=ERROR, word_re=None):$/;"	m	class:Highlight
re	.\highlight.py	/^import re$/;"	i
re	.\linter.py	/^import re$/;"	i
re	.\persist.py	/^import re$/;"	i
re	.\python_linter.py	/^import re$/;"	i
re	.\ruby_linter.py	/^import re$/;"	i
re	.\util.py	/^import re$/;"	i
re_flags	.\linter.py	/^    re_flags = 0$/;"	v	class:Linter
read_manifest	.\node_linter.py	/^    def read_manifest(self, current_manifest_mtime):$/;"	m	class:NodeLinter
recursive_replace	.\linter.py	/^        def recursive_replace(expressions, mutable_input, nested=False):$/;"	f	function:Linter.replace_settings_tokens
recursive_replace_value	.\linter.py	/^        def recursive_replace_value(expressions, value):$/;"	f	function:Linter.replace_settings_tokens
redraw	.\highlight.py	/^    def redraw(self, view):$/;"	m	class:HighlightSet
redraw_all	.\linter.py	/^    def redraw_all(cls):$/;"	m	class:Linter
regex	.\highlight.py	/^    def regex(self, line, regex, error_type=ERROR,$/;"	m	class:Highlight
regex	.\linter.py	/^    regex = ''$/;"	v	class:Linter
register_linter	.\persist.py	/^def register_linter(linter_class, name, attrs):$/;"	f
reinitialize	.\linter.py	/^    def reinitialize(cls):$/;"	m	class:Linter
reinitialize	.\python_linter.py	/^    def reinitialize(cls):$/;"	m	class:PythonLinter
reinitialize	.\ruby_linter.py	/^    def reinitialize(cls):$/;"	m	class:RubyLinter
reload	.\linter.py	/^    def reload(cls):$/;"	m	class:Linter
remove	.\linter.py	/^    def remove(cls, vid):$/;"	m	class:Linter
replace	.\persist.py	/^            def replace(edit):$/;"	f	function:Settings.save
replace_entity	.\linter.py	/^    def replace_entity(match):$/;"	m	class:Linter
replace_settings_tokens	.\linter.py	/^    def replace_settings_tokens(self, settings):$/;"	m	class:Linter
reset	.\highlight.py	/^    def reset(self):$/;"	m	class:Highlight
reset	.\highlight.py	/^    def reset(self, view):$/;"	m	class:HighlightSet
reset	.\linter.py	/^    def reset(self, code, settings):$/;"	m	class:Linter
rev_parse_manifest_path	.\node_linter.py	/^    def rev_parse_manifest_path(self, cwd):$/;"	m	class:NodeLinter
run	.\linter.py	/^    def run(self, cmd, code):$/;"	m	class:Linter
run	.\python_linter.py	/^    def run(self, cmd, code):$/;"	m	class:PythonLinter
run_shell_cmd	.\util.py	/^def run_shell_cmd(cmd):$/;"	f
running	.\queue.py	/^    running = False$/;"	v	class:Daemon
save	.\persist.py	/^    def save(self, view=None):$/;"	m	class:Settings
selectors	.\linter.py	/^    selectors = {}$/;"	v	class:Linter
set	.\persist.py	/^    def set(self, setting, value, changed=False):$/;"	m	class:Settings
set_mark_style	.\highlight.py	/^    def set_mark_style(self):$/;"	m	class:Highlight
settings	.\linter.py	/^    def settings(cls):$/;"	m	class:Linter
settings	.\persist.py	/^    settings = Settings()$/;"	v	class:Settings
shebang_match	.\linter.py	/^    shebang_match = None$/;"	v	class:Linter
shebang_match	.\python_linter.py	/^    shebang_match = match_shebang$/;"	v	class:PythonLinter
shlex	.\linter.py	/^import shlex$/;"	i
shlex	.\ruby_linter.py	/^import shlex$/;"	i
shutil	.\util.py	/^import shutil$/;"	i
split_match	.\linter.py	/^    def split_match(self, match):$/;"	m	class:Linter
start	.\queue.py	/^    def start(self, callback):$/;"	m	class:Daemon
stat	.\util.py	/^import stat$/;"	i
strip_quotes	.\highlight.py	/^    def strip_quotes(text):$/;"	m	class:Highlight
sublime	.\highlight.py	/^import sublime$/;"	i
sublime	.\linter.py	/^import sublime$/;"	i
sublime	.\node_linter.py	/^import sublime$/;"	i
sublime	.\persist.py	/^import sublime$/;"	i
sublime	.\ruby_linter.py	/^import sublime$/;"	i
sublime	.\util.py	/^import sublime$/;"	i
subprocess	.\util.py	/^import subprocess$/;"	i
syntax	.\linter.py	/^    syntax = ''$/;"	v	class:Linter
sys	.\persist.py	/^import sys$/;"	i
sys	.\util.py	/^import sys$/;"	i
sys_path_imported	.\persist.py	/^    sys_path_imported = False$/;"	v	class:Settings
tab_width	.\linter.py	/^    tab_width = 1$/;"	v	class:Linter
tempdir	.\util.py	/^tempdir = os.path.join(tempfile.gettempdir(), 'SublimeLinter3-' + getpass.getuser())$/;"	v
tempfile	.\util.py	/^import tempfile$/;"	i
tempfile_suffix	.\linter.py	/^    tempfile_suffix = None$/;"	v	class:Linter
text	.\linter.py	/^    def text(cls, view):$/;"	m	class:Linter
threading	.\queue.py	/^import threading$/;"	i
time	.\queue.py	/^import time$/;"	i
tmpdir	.\linter.py	/^    def tmpdir(self, cmd, files, code):$/;"	m	class:Linter
tmpdir	.\util.py	/^def tmpdir(cmd, files, filename, code, output_stream=STREAM_STDOUT, env=None):$/;"	f
tmpfile	.\linter.py	/^    def tmpfile(self, cmd, code, suffix=''):$/;"	m	class:Linter
tmpfile	.\util.py	/^def tmpfile(cmd, code, filename, suffix='', output_stream=STREAM_STDOUT, env=None):$/;"	f
touch	.\util.py	/^def touch(path):$/;"	f
traceback	.\queue.py	/^import traceback$/;"	i
unescape	.\linter.py	/^from xml.sax.saxutils import unescape$/;"	i
update	.\highlight.py	/^    def update(self, other):$/;"	m	class:Highlight
update_gutter_marks	.\persist.py	/^    def update_gutter_marks(self):$/;"	m	class:Settings
update_syntax_map	.\util.py	/^def update_syntax_map():$/;"	f
util	.\linter.py	/^from . import highlight, persist, util$/;"	i
util	.\node_linter.py	/^from . import linter, persist, util$/;"	i
util	.\persist.py	/^from . import util$/;"	i
util	.\python_linter.py	/^from . import linter, persist, util$/;"	i
util	.\queue.py	/^from . import persist, util$/;"	i
util	.\ruby_linter.py	/^from . import linter, persist, util$/;"	i
version_args	.\linter.py	/^    version_args = None$/;"	v	class:Linter
version_fulfills_request	.\util.py	/^def version_fulfills_request(available_version, requested_version):$/;"	f
version_re	.\linter.py	/^    version_re = None$/;"	v	class:Linter
version_requirement	.\linter.py	/^    version_requirement = None$/;"	v	class:Linter
view_did_close	.\persist.py	/^def view_did_close(vid):$/;"	f
view_linters	.\persist.py	/^    view_linters = {}$/;"	v	class:Settings
views	.\persist.py	/^    views = {}$/;"	v	class:Settings
which	.\linter.py	/^    def which(cls, cmd):$/;"	m	class:Linter
which	.\util.py	/^def which(cmd, module=None):$/;"	f
word_re	.\linter.py	/^    word_re = None$/;"	v	class:Linter
