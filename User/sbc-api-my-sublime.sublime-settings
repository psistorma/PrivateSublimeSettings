{
  "scope": "source.python - string",

  "completions":
  [
    // sublime
     [ "set_timeout [sublime]\tsublime", "set_timeout(${1:callback}${2, :delay})$0" ],
     [ "set_async_timeout\tsublime", "set_async_timeout(${1:callback}, ${2:delay})$0" ],
     [ "status_message\tsublime", "status_message(${1:string})$0" ],
     [ "error_message\tsublime", "error_message(${1:string})$0" ],
     [ "message_dialog\tsublime", "message_dialog(${1:string})$0" ],
     [ "ok_cancel_dialog\tsublime", "ok_cancel_dialog(${1:string}${2:, <ok_title>})$0" ],
     [ "yes_no_cancel_dialog\tsublime", "yes_no_cancel_dialog(${1:string}${2:, <yes_title>}${3:, <no_title>})$0" ],
     [ "load_resource\tsublime", "load_resource(${1:name})$0" ],
     [ "load_binary_resource\tsublime", "load_binary_resource(${1:name})$0" ],
     [ "encode_value\tsublime", "encode_value(${1:value}${2:, <pretty>})$0" ],
     [ "decode_value\tsublime", "decode_value(${1:string})$0" ],
     [ "expand_variables\tsublime", "expand_variables(${1:value}${2:, variables})$0" ],
     [ "load_settings\tsublime", "load_settings(${1:base_name})$0" ],
     [ "save_settings\tsublime", "save_settings(${1:base_name})$0" ],
     [ "windows\tsublime", "windows()$0" ],
     [ "active_window\tsublime", "active_window()$0" ],
     [ "packages_path\tsublime", "packages_path()$0" ],
     [ "installed_packages_path\tsublime", "installed_packages_path()$0" ],
     [ "cache_path\tsublime", "cache_path()$0" ],
     [ "get_clipboard\tsublime", "get_clipboard(${1:<size_limit>})$0" ],
     [ "set_clipboard\tsublime", "set_clipboard(${1:string})$0" ],
     [ "score_selector\tsublime", "score_selector(${1:scope}, ${2:selector})$0" ],
     [ "run_command\tsublime", "run_command(${1:string}${2:, <args>})$0" ],
     [ "log_commands\tsublime", "log_commands(${1:flag})$0" ],
     [ "log_input\tsublime", "log_input(${1:flag})$0" ],
     [ "log_result_regex\tsublime", "log_result_regex(${1:flag})$0" ],
     [ "version\tsublime", "version()$0" ],
     [ "platform\tsublime", "platform()$0" ],
     [ "arch\tsublime", "arch()$0" ],
     //sublime.constant
     [ "CLASS_WORD_START\tsublime", "CLASS_WORD_START$0" ],
     [ "CLASS_WORD_END\tsublime", "CLASS_WORD_END$0" ],
     [ "CLASS_PUNCTUATION_START\tsublime", "CLASS_PUNCTUATION_START$0" ],
     [ "CLASS_PUNCTUATION_END\tsublime", "CLASS_PUNCTUATION_END$0" ],
     [ "CLASS_SUB_WORD_START\tsublime", "CLASS_SUB_WORD_START$0" ],
     [ "CLASS_SUB_WORD_END\tsublime", "CLASS_SUB_WORD_END$0" ],
     [ "CLASS_LINE_START\tsublime", "CLASS_LINE_START$0" ],
     [ "CLASS_LINE_END\tsublime", "CLASS_LINE_END$0" ],
     [ "CLASS_EMPTY_LINE\tsublime", "CLASS_EMPTY_LINE$0" ],

     [ "DRAW_EMPTY\tsublime", "DRAW_EMPTY$0" ],
     [ "HIDE_ON_MINIMAP\tsublime", "HIDE_ON_MINIMAP$0" ],
     [ "DRAW_EMPTY_AS_OVERWRITE\tsublime", "DRAW_EMPTY_AS_OVERWRITE$0" ],
     [ "DRAW_NO_FILL\tsublime", "DRAW_NO_FILL$0" ],
     [ "DRAW_NO_OUTLINE\tsublime", "DRAW_NO_OUTLINE$0" ],
     [ "DRAW_SOLID_UNDERLINE\tsublime", "DRAW_SOLID_UNDERLINE$0" ],
     [ "DRAW_STIPPLED_UNDERLINE\tsublime", "DRAW_STIPPLED_UNDERLINE$0" ],
     [ "DRAW_SQUIGGLY_UNDERLINE\tsublime", "DRAW_SQUIGGLY_UNDERLINE$0" ],
     [ "PERSISTENT\tsublime", "PERSISTENT$0" ],
     [ "HIDDEN\tsublime", "HIDDEN$0" ],
     [ "ENCODED_POSITION\tsublime", "ENCODED_POSITION$0" ],
     [ "TRANSIENT\tsublime", "TRANSIENT$0" ],


     //sublime.view
     [ "id\tview", "id()$0" ],
     [ "buffer_id\tview", "buffer_id()$0" ],
     [ "file_name\tview", "file_name()$0" ],
     [ "name\tview", "name()$0" ],
     [ "set_name\tview", "set_name()$0" ],
     [ "is_loading\tview", "is_loading()$0" ],
     [ "is_dirty\tview", "is_dirty()$0" ],
     [ "is_read_only\tview", "is_read_only()$0" ],
     [ "set_read_only\tview", "set_read_only(${1:value})$0" ],
     [ "is_scratch\tview", "is_scratch()$0" ],
     [ "set_scratch\tview", "set_scratch(${1:value})$0" ],
     [ "settings\tview", "settings()$0" ],
     [ "window\tview", "window()$0" ],
     [ "run_command\tview", "run_command(${1:string}${2:, <args>})$0" ],
     [ "size\tview", "size()$0" ],
     [ "substr\tview", "substr(${1:region_or_point})$0" ],
     [ "insert\tview", "insert(${1:edit}, ${2:point}, ${3:string})$0" ],
     [ "erase\tview", "erase(${1:edit}, ${2:region})$0" ],
     [ "replace\tview", "replace(${1:edit}, ${2:point}, ${3:string})$0" ],
     [ "sel\tview", "sel()$0" ],
     [ "line\tview", "line(${1:point_or_region})$0" ],
     [ "full_line\tview", "full_line(${1:point_or_region})$0" ],
     [ "lines\tview", "lines(${1:region})$0" ],
     [ "split_by_newlines\tview", "split_by_newlines(${1:region})$0" ],
     [ "word\tview", "word(${1:point_or_region})$0" ],
     [ "classify\tview", "classify(${1:point})$0" ],
     [ "find_by_class\tview", "find_by_class(${1:point}, ${2:forward}, ${3:classes}${4:, <separators>})$0" ],
     [ "expand_by_class\tview", "expand_by_class(${1:point_or_region}, ${2:classes}${3:, <separators>})$0" ],
     [ "find\tview", "find(${1:pattern}, ${2:fromPosition${3:, <flags>})$0" ],
     [ "find_all\tview", "find_all(${1:pattern}${2:, <flags>${3:, <format>}${4:, <extractions>})$0" ],
     [ "rowcol\tview", "rowcol(${1:point})$0" ],
     [ "text_point\tview", "text_point(${1:row}, ${2:col})$0" ],
     [ "set_syntax_file\tview", "set_syntax_file(${1:syntax_file})$0" ],
     [ "extract_scope\tview", "extract_scope(${1:point})$0" ],
     [ "scope_name\tview", "scope_name(${1:point})$0" ],
     [ "score_selector\tview", "score_selector(${1:point}), ${2:selector})$0" ],
     [ "find_by_selector\tview", "find_by_selector(${1:selector})$0" ],
     [ "show\tview", "show(${1:point_or_region_or_regionSet})${1:, <show_surrounds>})$0" ],
     [ "show_at_center\tview", "show_at_center(${1:point_or_region})$0" ],
     [ "visible_region\tview", "visible_region()$0" ],
     [ "viewport_position\tview", "viewport_position()$0" ],
     [ "set_viewport_position\tview", "set_viewport_position(${1:vector})${2:, <animate>})$0" ],
     [ "viewport_extent\tview", "viewport_extent()$0" ],
     [ "layout_extent\tview", "layout_extent()$0" ],
     [ "text_to_layout\tview", "text_to_layout(${1:point})$0" ],
     [ "layout_to_text\tview", "layout_to_text(${1:vector})$0" ],
     [ "window_to_layout\tview", "window_to_layout(${1:vector})$0" ],
     [ "window_to_text\tview", "window_to_text(${1:vector})$0" ],
     [ "line_height\tview", "line_height()$0" ],
     [ "em_width\tview", "em_width()$0" ],
     [ "add_regions\tview", "add_regions(${1:key}), ${2:[regions]}${3:, <scope>}${4:, <icon>}${5:, <flags>})$0" ],

     [ "get_regions\tview", "get_regions(${1:key})$0" ],
     [ "erase_regions\tview", "erase_regions(${1:key})$0" ],
     [ "set_status\tview", "set_status(${1:key}, ${2:value})$0" ],
     [ "get_status\tview", "get_status(${1:key})$0" ],
     [ "erase_status\tview", "erase_status(${1:key})$0" ],
     [ "command_history\tview", "command_history(${1:index}${2:, <modifying_only>}))$0" ],
     [ "change_count\tview", "change_count()$0" ],
     [ "fold\tview", "fold(${1:[regions]_or_region})$0" ],
     [ "unfold\tview", "unfold(${1:[regions]_or_region})$0" ],
     [ "encoding\tview", "encoding()$0" ],
     [ "set_encoding\tview", "set_encoding(${1:encoding})$0" ],
     [ "line_endings\tview", "line_endings(line_endings)$0" ],
     [ "overwrite_status\tview", "overwrite_status()$0" ],
     [ "set_overwrite_status\tview", "set_overwrite_status(${1:enabled})$0" ],
     [ "symbols\tview", "symbols(${1:line_endings})$0" ],
     [ "show_popup_menu\tview", "show_popup_menu(${1:items}, ${2:on_done}${3:, <flags>})$0" ],


     //sublime.Selection
     [ "clear\tselection", "clear()$0" ],
     [ "add\tselection", "add(${1:region})$0" ],
     [ "add_all\tselection", "add_all(${1:region_set})$0" ],
     [ "subtract\tselection", "subtract(${1:region})$0" ],
     [ "contains\tselection", "contains(${1:region})$0" ],


     //sublime.Region
     [ "Region\tregion", "Region(${1:a}, ${1:b})$0" ],
     [ "begin\tregion", "begin()$0" ],
     [ "end\tregion", "end()$0" ],
     [ "size\tregion", "size()$0" ],
     [ "empty\tregion", "empty()$0" ],
     [ "cover\tregion", "cover(${1:region})$0" ],
     [ "intersection\tregion", "intersection(${1:region})$0" ],
     [ "intersects\tregion", "intersects(${1:region})$0" ],
     [ "contains\tregion", "contains(${1:point_or_region})$0" ],

     //sublime.Window
     [ "id\twindow", "id()$0" ],
     [ "new_file\twindow", "new_file()$0" ],
     [ "open_file\twindow", "open_file(${1:file_name}${2:, <flags>})$0" ],
     [ "find_open_file\twindow", "find_open_file(${1:file_name})$0" ],
     [ "active_view\twindow", "active_view()$0" ],
     [ "active_view_in_group\twindow", "active_view_in_group(${1:group})$0" ],
     [ "views\twindow", "views()$0" ],
     [ "views_in_group\twindow", "views_in_group(${1:group})$0" ],

     [ "num_groups\twindow", "num_groups()$0" ],
     [ "active_group\twindow", "active_group()$0" ],
     [ "focus_group\twindow", "focus_group(${1:group})$0" ],
     [ "focus_view\twindow", "focus_view(${1:view})$0" ],
     [ "get_view_index\twindow", "get_view_index(${1:view})$0" ],
     [ "set_view_index\twindow", "set_view_index(${1:view}, ${2:group}, ${3:index})$0" ],
     [ "folders\twindow", "folders()$0" ],
     [ "project_file_name\twindow", "project_file_name()$0" ],
     [ "project_data\twindow", "project_data()$0" ],
     [ "set_project_data\twindow", "set_project_data(${1:data})$0" ],
     [ "run_command\twindow", "run_command(${1:string}${2:, <args>})$0" ],
     [ "show_input_panel\twindow", "show_input_panel(${1:caption}, ${2:initial_text}, ${3:on_done}, ${4:on_change}, ${5:on_cancel})$0" ],
     [ "create_output_panel\twindow", "create_output_panel(${1:name})$0" ],
     [ "lookup_symbol_in_index\twindow", "lookup_symbol_in_index(${1:symbol})$0" ],
     [ "lookup_symbol_in_open_files\twindow", "lookup_symbol_in_open_files(${1:symbol})$0" ],
     [ "extract_variables\twindow", "extract_variables()$0" ],

     //sublime.Settings
     [ "get\tsettings", "get(${1:name}${2:, <default})$0" ],
     [ "set\tsettings", "set(${1:name}, ${2:value})$0" ],
     [ "erase\tsettings", "erase(${1:name})$0" ],
     [ "has\tsettings", "has(${1:name})$0" ],
     [ "add_on_change\tsettings", "add_on_change(${1:key}, ${2:on_change})$0" ],
     [ "clear_on_change\tsettings", "clear_on_change(${1:key})$0" ],


  ]
}
