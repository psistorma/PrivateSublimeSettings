%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: CMakeByStorm
comment: MinliXie80@gmail.com
file_extensions:
  - cmake
  - CMakeLists.txt
scope: source.cmake
variables:
  svCMakeCommand: '(?i:cmake_minimum_required|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_subdirectory|add_test|aux_source_directory|break|build_command|cmake_minimum_required|cmake_policy|configure_file|create_test_sourcelist|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|execute_process|export|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|generate_export_header|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_regular_expression|install|link_directories|list|load_cache|load_command|macro|mark_as_advanced|math|message|option|project|qt_wrap_cpp|qt_wrap_ui|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|target_compile_definitions|target_compile_options|target_include_directories|target_link_libraries|try_compile|try_run|unset|variable_watch|while)'
contexts:
  prototype:
    - match: "#+.*$"
      scope: comment.source.cmake
    - match: ，|。|（|）|“|”|;|,|\{|\<'
      scope: invalid.illegal.punctuation
  main:
    - include: rule_comand

  rule_comand:
    - match: (?=^\s*{{svCMakeCommand}}\s*\()
      push:
        - match: \s*\b(if|endif|else)\b
          scope: keyword.control.c
        - match: \s*\b(project)\b
          scope: meta.tip.important meta.tip.highlight keyword.control.c
        - match: '\s*{{svCMakeCommand}}'
          scope: keyword.function.cmake
        - match: (?=\s*\()
          set: step-parens-invoke

  step-parens-invoke:
    - meta_scope: meta.parens meta.invoke
    - include: step-finish-at-end-of-line
    - match: \s*\(
      scope: punctuation.bracket.parens.begin
      push:
        - match: \s*\)
          scope: punctuation.bracket.parens.end
          pop: true
        - include: lex-storage-source
    - include: step-finish-now

  lex-storage-source:
     - include: lex-storage-key
     - include: lex-variable

  lex-storage-key:
    - match: '\s*(\$)(\{|\<)(?=\w+\s*(\}|\>))'
      captures:
       1: meta.tip.highlight punctuation.library.cmake
       2: punctuation.symbol.begin.cmake
      push: step-variable-key

  lex-variable:
    - include: lex-normal-keyword
    - include: lex-literal-value
    - include: rule-variable-key

  step-variable-key:
    - match: \s*(\}|\>)
      scope: punctuation.symbol.end.cmake
      pop: true
    - include: rule-variable-key

  rule-variable-key:
    - match: (?=\s*(?i:CMAKE_|PROJECT_)\w+)
      push:
        - meta_scope: meta.tip.library
        - include: __step-variable-key-info
    - match: (?=\w|-)
      push:
        - include: __step-variable-key-info

  lex-normal-keyword:
    - match: \b(VERSION)\b\s+((?:[0-9]+\.?[0-9]+\.?)+)
      captures:
        1: keyword.other.version
        2: meta.tip.important string.file-desc.cmake.version
    - match: \b(NOT)\b
      scope: meta.tip.highlight keyword.operator.logical.cmake
    - match: \b(DEFINED)\b
      scope: keyword.other.cmake

  lex-literal-value:
    - include: lex-literal-string
    - include: lex-literal-number
    - include: lex-literal-inner

  lex-literal-string:
    - match: '\s*"'
      captures:
        0: punctuation.definition.string.begin.cmake
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.cmake
        - match: '"'
          scope: punctuation.definition.string.end.cmake
          pop: true
        - match: '/'
          scope: meta.tip.highlight punctuation.slash
        - include: string-escaped-char
        - include: lex-storage-key

  string-escaped-char:
    - match: '\\(\\|[abefnprtv''"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})'
      scope: constant.character.escape.c
    - match: \\.
      scope: invalid.illegal.unknown-escape.c

  __step-variable-key-info:
    - match: (?=\s|\)|\}|\>)
      pop: true
    - match: (?<=\s|\()-D\w++(?=\s|\))
      comment: Variables That Change Compliler Preprocessor Behavior
      scope: variable.parameter.compiler.preprocessor.cmake
    - match: \b(?i:\w+?_(?:COMPILER|CXX|C)_FLAGS(_\w+)?)\b
      comment: Variables That Change Compliler Behavior
      scope: variable.parameter.compiler.cmake
    - match: \b(?i:\w+?_EXE_LINKER_FLAGS(_\w+)?)\b
      comment: Variables That Change EXE Linker Behavior
      scope: variable.parameter.linker.exe.cmake
    - match: \b(?i:\w+?_LINKER_FLAGS(_\w+)?)\b
      comment: Variables That Change Linker Behavior
      scope: variable.parameter.linker.cmake
    - match: \b(?i:\w+?_(?:RESOURCE_DIR|SOURCE_DIR)(_\w+)?)\b
      comment: Variables that Provide Input Source Information
      scope: variable.parameter.input.cmake
    - match: \b(?i:\w+?_(?:BINARY_DIR|OUTPUT_DIRECTORY)(_\w+)?)\b
      comment: Variables that Control the Build OUTPUT PATH
      scope: variable.parameter.output.cmake
#-------------------simple step-------------------------------------
  step-finish-at-end-of-line:
    - match: $\n?
      pop: true

  step-finish-now:
    - match: (?=.?)
      pop: true


