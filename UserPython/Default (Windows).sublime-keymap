[
//python
    {
        "command": "insert",
        "args": {"characters": ":\n"},
        "keys": [":"], "context": [
            {"key": "selection_empty", "operator": "equal", "operand": true},
            {"key": "preceding_text", "operator": "not_regex_contains", "operand": "(?:\\blambda\\s*|:)$"},
            {"key": "following_text", "operator": "regex_match", "operand": "$"},
            {"key": "selector", "operator": "equal", "operand": "source.python"}
        ]
    },
    // Auto-pair quotes
    { "keys": ["\""], "command": "insert_snippet", "args": {"contents": "\"$0\""}, "context":
        [
            {"key": "selector", "operator": "equal", "operand": "source.python"},
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|:|]|\\}|>|$)", "match_all": true },
            { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\"a-zA-Z0-9_]$", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double - punctuation.definition.string.end", "match_all": true }
        ]
    },
    { "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'$0'"}, "context":
        [
            {"key": "selector", "operator": "equal", "operand": "source.python"},
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|:|]|\\}|>|$)", "match_all": true },
            { "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
        ]
    },
    // Auto-pair brackets
    { "keys": ["("], "command": "insert_snippet", "args": {"contents": "($0)"}, "context":
        [
            {"key": "selector", "operator": "equal", "operand": "source.python"},
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|:|]|;|\\}|$)", "match_all": true }
        ]
    },
    // Auto-pair square brackets
    { "keys": ["["], "command": "insert_snippet", "args": {"contents": "[$0]"}, "context":
        [
            {"key": "selector", "operator": "equal", "operand": "source.python"},
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|:|]|;|\\}|$)", "match_all": true }
        ]
    },
    {
        "command": "anaconda_goto", "keys": ["f6"], "context": [
            {"key": "selector", "operator": "equal", "operand": "source.python"}
        ]
    },
    {
        "command": "anaconda_find_usages", "keys": ["ctrl+alt+f1"], "context": [
            {"key": "selector", "operator": "equal", "operand": "source.python"}
        ]
    },
    {
        "command": "anaconda_doc", "keys": ["ctrl+f1"], "context": [
            {"key": "selector", "operator": "equal", "operand": "source.python"}
        ]
    },
    {
        "command": "anaconda_auto_format", "keys": ["alt+f8"], "context": [
            {"key": "selector", "operator": "equal", "operand": "source.python"}
        ]
    }
]
